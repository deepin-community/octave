@c DO NOT EDIT!  Generated automatically by genpropdoc.m.

@c Copyright (C) 2014-2024 The Octave Project Developers
@c
@c See the file COPYRIGHT.md in the top-level directory of this
@c distribution or <https://octave.org/copyright/>.
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

Properties of @code{patch} objects (@pxref{XREFpatch,,patch}):

@subsubheading Categories:

@ref{XREFpatchcategoryCallbackExecution, , @w{Callback Execution}}@: | @ref{XREFpatchcategoryColorandTransparency, , @w{Color and Transparency}}@: | @ref{XREFpatchcategoryCoordinateData, , @w{Coordinate Data}}@: | @ref{XREFpatchcategoryCreation/Deletion, , @w{Creation/Deletion}}@: | @ref{XREFpatchcategoryDisplay, , @w{Display}}@: | @ref{XREFpatchcategoryLegendOptions, , @w{Legend Options}}@: | @ref{XREFpatchcategoryLighting, , @w{Lighting}}@: | @ref{XREFpatchcategoryMarkerAppearance, , @w{Marker Appearance}}@: | @ref{XREFpatchcategoryMouseInteraction, , @w{Mouse Interaction}}@: | @ref{XREFpatchcategoryObjectIdentification, , @w{Object Identification}}@: | @ref{XREFpatchcategoryOutlineAppearance, , @w{Outline Appearance}}@: | @ref{XREFpatchcategoryParent/Children, , @w{Parent/Children}}@: 

@anchor{XREFpatchcategoryCallbackExecution}
@subsubheading Callback Execution
@prindex patch CallbackExecution

@table @asis

@anchor{XREFpatchbusyaction}
@prindex patch busyaction
@item @code{busyaction}: @qcode{"cancel"} | @{@qcode{"queue"}@}
Define how Octave handles the execution of this object's callback properties when it is unable to interrupt another object's executing callback.  This is only relevant when the currently executing callback object has its @code{interruptible} property set to @qcode{"off"}.  The @code{busyaction} property of the interrupting callback object indicates whether the interrupting callback is queued (@qcode{"queue"} (default)) or discarded (@qcode{"cancel"}).
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFpatchinterruptible}
@prindex patch interruptible
@item @code{interruptible}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether this object's callback functions may be interrupted by other callbacks.  By default @code{interruptible} is @qcode{"on"} and callbacks that make use of @code{drawnow}, @code{figure}, @code{waitfor}, @code{getframe} or @code{pause} functions are eventually interrupted.
@xref{Callbacks, , @w{Callbacks section}}.

@end table

@anchor{XREFpatchcategoryColorandTransparency}
@subsubheading Color and Transparency
@prindex patch ColorandTransparency

@table @asis

@anchor{XREFpatchalphadatamapping}
@prindex patch alphadatamapping
@item @code{alphadatamapping}: @qcode{"direct"} | @qcode{"none"} | @{@qcode{"scaled"}@}
Transparency is not yet implemented for patch objects.  @code{alphadatamapping} is unused.


@anchor{XREFpatchcdata}
@prindex patch cdata
@item @code{cdata}: scalar | matrix | array, def. @code{[](0x0)}
Data defining the patch object color relative to its x/y/z-coordinate data.  Patch color can be defined using indices into the current colormap or as RGB triplets, where the RGB colors are defined along the third dimension. These colors can be separately defined for the entire patch object, for individual faces, or for individual vertices, and is determined by the shape of @qcode{"cdata"} as follows:

If @qcode{"cdata"} is a scalar index into the current colormap or a 1-by-1-by-3 RGB triplet, it defines the color of all faces and edges.

If the patch object has N faces, and @qcode{"cdata"} is a 1-by-N vector of colormap indices or a 1-by-N-by-3 RGB array, it defines the color of each face.

If the patch object has N faces and M vertices per face, and @code{cdata} is a M-by-N matrix of colormap indices or a M-by-N-by-3 RGB array, it defines the color at each vertex. (The shape of @qcode{"cdata"} should match that of @ref{XREFpatchxdata,,@qcode{"xdata"}}, @ref{XREFpatchydata,,@qcode{"ydata"}}, and @ref{XREFpatchzdata,,@qcode{"zdata"}}.)


@anchor{XREFpatchcdatamapping}
@prindex patch cdatamapping
@item @code{cdatamapping}: @qcode{"direct"} | @{@qcode{"scaled"}@}
Sets the method for mapping data from the @ref{XREFpatchcdata, , @qcode{"cdata"}} or @ref{XREFpatchcdata, , @qcode{"cdata"}} property to the current colormap.  @qcode{"Direct"} mapping selects the color using the @qcode{"cdata"} or @qcode{"facevertexcdata"} value as an index to the current colormap.  @qcode{"Scaled"} mapping scales the @qcode{"cdata"} or @qcode{"facevertexcdata"} values to the range specified in the @ref{XREFaxesclim, , @w{@qcode{"clim"} axes property}}.


@anchor{XREFpatchfacealpha}
@prindex patch facealpha
@item @code{facealpha}: scalar | @qcode{"flat"} | @qcode{"interp"}, def. @code{1}
Transparency level of the faces of the patch object.  Only double values are supported at present where a value of 0 means complete transparency and a value of 1 means solid faces without transparency.  Setting the property to @qcode{"flat"} or @qcode{"interp"} causes the faces to not being rendered.  Additionally, the faces are not sorted from back to front which might lead to unexpected results when rendering layered transparent faces.


@anchor{XREFpatchfacecolor}
@prindex patch facecolor
@item @code{facecolor}: @{colorspec@} | @qcode{"none"} | @qcode{"flat"} | @qcode{"interp"}, def. @code{[0   0   0]}
Color of the faces of the patch object, specified as either a valid color specification or one of @qcode{"none"}, @qcode{"flat"}, or @qcode{"interp"}.  @qcode{"flat"} and @qcode{"interp"} will set either a single color for each face or a color interpolated across the face's vertices using the color value data stored in either the @ref{XREFpatchcdata, , @qcode{"cdata"}} or @ref{XREFpatchfacevertexcdata, , @qcode{"facevertexcdata"}} properties.  @xref{Colors, , colorspec}.


@anchor{XREFpatchfacelighting}
@prindex patch facelighting
@item @code{facelighting}: @{@qcode{"flat"}@} | @qcode{"gouraud"} | @qcode{"none"} | @qcode{"phong"}
When set to a value other than @qcode{"none"}, the faces of the object are drawn with light and shadow effects.  Supported values are @qcode{"none"} (no lighting effects), @qcode{"flat"} (faceted look), and @qcode{"gouraud"} (linear interpolation of the lighting effects between the vertices).  @qcode{"phong"} is deprecated and has the same effect as @qcode{"gouraud"}.


@anchor{XREFpatchfacevertexalphadata}
@prindex patch facevertexalphadata
@item @code{facevertexalphadata}: def. @code{[](0x0)}
Face-Vertex transparency control is not yet implemented for patch objects.  @code{facevertexalphadata} is unused.


@anchor{XREFpatchfacevertexcdata}
@prindex patch facevertexcdata
@item @code{facevertexcdata}: scalar | matrix, def. @code{[](0x0)}
Data defining the patch object color relative to its face-vertex data.  Patch color can be defined using indices into the current colormap or as RGB triplets, where the RGB colors are defined in the rows of @qcode{"facevertexcdata"}.  These colors can be separately defined for the entire patch object, for individual faces, or for individual vertices, and is determined by the shape of @qcode{"facevertexcdata"} as follows:

If @code{facevertexcdata} is a scalar index into the current colormap or a 1-by-3 RGB triplet, it defines the color of all faces and edges.

If the patch object has N faces, and @code{facevertexcdata} is a N-by-1 column vector of indices or a N-by-3 RGB matrix, it defines the color of each one of the N faces.

If the patch object has M vertices, and @code{facevertexcdata} is a M-by-1 column vector of indices or a M-by-3 RGB matrix, it defines the color at each vertex.

@end table

@anchor{XREFpatchcategoryCoordinateData}
@subsubheading Coordinate Data
@prindex patch CoordinateData

@table @asis

@anchor{XREFpatchfaces}
@prindex patch faces
@item @code{faces}: vector | matrix, def. @code{[1   2   3]}
patch faces connectivity list stored as an M x N matrix, with each of the M faces defined by a row of up to N vertices, and each element contains the row index of a vertex stored in the @ref{XREFpatchvertices, , @w{vertices property}}.  Faces with fewer than N vertices use NaN values to fill empty row elements.


@anchor{XREFpatchvertices}
@prindex patch vertices
@item @code{vertices}: vector | matrix, def. 3-by-2 double
patch vertex list stored as an N x 3 matrix, with each row containing the x, y, and z coordinates of the vector, and used with the @ref{XREFpatchfaces, , @w{faces property}} to define patch structure.


@anchor{XREFpatchxdata}
@prindex patch xdata
@item @code{xdata}: vector | matrix, def. @code{[0;    1;    0]}
patch vertex x-coordinates.


@anchor{XREFpatchydata}
@prindex patch ydata
@item @code{ydata}: vector | matrix, def. @code{[1;    1;    0]}
patch vertex y-coordinates.


@anchor{XREFpatchzdata}
@prindex patch zdata
@item @code{zdata}: vector | matrix, def. @code{[](0x0)}
patch vertex z-coordinates.

@end table

@anchor{XREFpatchcategoryCreation/Deletion}
@subsubheading Creation/Deletion
@prindex patch Creation/Deletion

@table @asis

@anchor{XREFpatchbeingdeleted}
@prindex patch beingdeleted
@item @code{beingdeleted}: @{@qcode{"off"}@} | @qcode{"on"}
Property indicating that a function has initiated deletion of the object.  @code{beingdeleted} is set to true until the object no longer exists.


@anchor{XREFpatchcreatefcn}
@prindex patch createfcn
@item @code{createfcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately after patch has been created.  Function is set by using default property on root object, e.g., @code{set (groot, "defaultpatchcreatefcn", 'disp ("patch created!")')}.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFpatchdeletefcn}
@prindex patch deletefcn
@item @code{deletefcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately before patch is deleted.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.

@end table

@anchor{XREFpatchcategoryDisplay}
@subsubheading Display
@prindex patch Display

@table @asis

@anchor{XREFpatchclipping}
@prindex patch clipping
@item @code{clipping}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{clipping} is @qcode{"on"}, the patch is clipped in its parent axes limits.


@anchor{XREFpatchvisible}
@prindex patch visible
@item @code{visible}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{visible} is @qcode{"off"}, the patch is not rendered on screen.

@end table

@anchor{XREFpatchcategoryLegendOptions}
@subsubheading Legend Options
@prindex patch LegendOptions

@table @asis

@anchor{XREFpatchdisplayname}
@prindex patch displayname
@item @code{displayname}: def. @qcode{""}
Text of the legend entry corresponding to this patch.

@end table

@anchor{XREFpatchcategoryLighting}
@subsubheading Lighting
@prindex patch Lighting

@table @asis

@anchor{XREFpatchambientstrength}
@prindex patch ambientstrength
@item @code{ambientstrength}: scalar, def. @code{0.3000}
Strength of the ambient light.  Value between 0.0 and 1.0.


@anchor{XREFpatchbackfacelighting}
@prindex patch backfacelighting
@item @code{backfacelighting}: @qcode{"lit"} | @{@qcode{"reverselit"}@} | @qcode{"unlit"}
@qcode{"lit"}: The normals are used as is for lighting.  @qcode{"reverselit"}: The normals are always oriented towards the point of view.  @qcode{"unlit"}: Faces with normals pointing away from the point of view are unlit.


@anchor{XREFpatchdiffusestrength}
@prindex patch diffusestrength
@item @code{diffusestrength}: scalar, def. @code{0.6000}
Strength of the diffuse reflection.  Value between 0.0 (no diffuse reflection) and 1.0 (full diffuse reflection).


@anchor{XREFpatchfacenormals}
@prindex patch facenormals
@item @code{facenormals}: def. @code{[](0x0)}
Face normals are used for lighting the edges or faces if the @code{edgelighting} or @code{facelighting} properties are set to @qcode{"flat"}.  Setting @code{facenormals} also forces the @code{facenormalsmode} property to be set to @qcode{"manual"}.


@anchor{XREFpatchfacenormalsmode}
@prindex patch facenormalsmode
@item @code{facenormalsmode}: @{@qcode{"auto"}@} | @qcode{"manual"}
If this property is set to @qcode{"auto"}, @code{facenormals} are automatically calculated if the @code{edgelighting} or @code{facelighting} property are set to @qcode{"flat"} and at least one @code{light} object is present and visible in the same axes.


@anchor{XREFpatchspecularcolorreflectance}
@prindex patch specularcolorreflectance
@item @code{specularcolorreflectance}: scalar, def. @code{1}
Reflectance for specular color.  Value between 0.0 (color of underlying face) and 1.0 (color of light source).


@anchor{XREFpatchspecularexponent}
@prindex patch specularexponent
@item @code{specularexponent}: scalar, def. @code{10}
Exponent for the specular reflection.  The lower the value, the more the reflection is spread out.


@anchor{XREFpatchspecularstrength}
@prindex patch specularstrength
@item @code{specularstrength}: scalar, def. @code{0.9000}
Strength of the specular reflection.  Value between 0.0 (no specular reflection) and 1.0 (full specular reflection).


@anchor{XREFpatchvertexnormals}
@prindex patch vertexnormals
@item @code{vertexnormals}: def. @code{[](0x0)}
Vertex normals are used for lighting the edges or faces if the @code{edgelighting} or @code{facelighting} properties are set to @qcode{"gouraud"}.  Setting @code{vertexnormals} also forces the @code{vertexnormalsmode} property to be set to @qcode{"manual"}.


@anchor{XREFpatchvertexnormalsmode}
@prindex patch vertexnormalsmode
@item @code{vertexnormalsmode}: @{@qcode{"auto"}@} | @qcode{"manual"}
If this property is set to @qcode{"auto"}, @code{vertexnormals} are automatically calculated if the @code{edgelighting} or @code{facelighting} property are set to @qcode{"gouraud"} and at least one @code{light} object is present and visible in the same axes.

@end table

@anchor{XREFpatchcategoryMarkerAppearance}
@subsubheading Marker Appearance
@prindex patch MarkerAppearance

@table @asis

@anchor{XREFpatchmarker}
@prindex patch marker
@item @code{marker}: @qcode{"*"} | @qcode{"+"} | @qcode{"."} | @qcode{"<"} | @qcode{">"} | @qcode{"^"} | @qcode{"_"} | @qcode{"d"} | @qcode{"diamond"} | @qcode{"h"} | @qcode{"hexagram"} | @{@qcode{"none"}@} | @qcode{"o"} | @qcode{"p"} | @qcode{"pentagram"} | @qcode{"s"} | @qcode{"square"} | @qcode{"v"} | @qcode{"x"} | @qcode{"|"}
@xref{XREFlinemarker, , @w{line marker property}}.


@anchor{XREFpatchmarkeredgecolor}
@prindex patch markeredgecolor
@item @code{markeredgecolor}: @{@qcode{"auto"}@} | @qcode{"flat"} | @qcode{"none"}
@xref{XREFlinemarkeredgecolor, , @w{line markeredgecolor property}}.


@anchor{XREFpatchmarkerfacecolor}
@prindex patch markerfacecolor
@item @code{markerfacecolor}: @qcode{"auto"} | @qcode{"flat"} | @{@qcode{"none"}@}
@xref{XREFlinemarkerfacecolor, , @w{line markerfacecolor property}}.


@anchor{XREFpatchmarkersize}
@prindex patch markersize
@item @code{markersize}: scalar, def. @code{6}
@xref{XREFlinemarkersize, , @w{line markersize property}}.

@end table

@anchor{XREFpatchcategoryMouseInteraction}
@subsubheading Mouse Interaction
@prindex patch MouseInteraction

@table @asis

@anchor{XREFpatchbuttondownfcn}
@prindex patch buttondownfcn
@item @code{buttondownfcn}: string | function handle, def. @code{[](0x0)}
For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFpatchcontextmenu}
@prindex patch contextmenu
@item @code{contextmenu}: graphics handle, def. @code{[](0x0)}
Graphics handle of the uicontextmenu object that is currently associated to this patch object.


@anchor{XREFpatchhittest}
@prindex patch hittest
@item @code{hittest}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether patch processes mouse events or passes them to ancestors of the object.  When enabled, the object may respond to mouse clicks by evaluating the @qcode{"buttondownfcn"}, showing the uicontextmenu, and eventually becoming the root @qcode{"currentobject"}.  This property is only relevant when the object can accept mouse clicks which is determined by the @qcode{"pickableparts"} property.  @xref{XREFpatchpickableparts, , @w{pickableparts property}}.


@anchor{XREFpatchpickableparts}
@prindex patch pickableparts
@item @code{pickableparts}: @qcode{"all"} | @qcode{"none"} | @{@qcode{"visible"}@}
Specify whether patch will accept mouse clicks.  By default, @code{pickableparts} is @qcode{"visible"} and only visible parts of the patch or its children may react to mouse clicks.  When @code{pickableparts} is @qcode{"all"} both visible and invisible parts (or children) may react to mouse clicks.  When @code{pickableparts} is @qcode{"none"} mouse clicks on the object are ignored and transmitted to any objects underneath this one.  When an object is configured to accept mouse clicks the @qcode{"hittest"} property will determine how they are processed.  @xref{XREFpatchhittest, , @w{hittest property}}.


@anchor{XREFpatchselected}
@prindex patch selected
@item @code{selected}: @{@qcode{"off"}@} | @qcode{"on"}
Property indicates whether this patch is selected.


@anchor{XREFpatchselectionhighlight}
@prindex patch selectionhighlight
@item @code{selectionhighlight}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{selectionhighlight} is @qcode{"on"}, then the patch's selection state is visually highlighted.

@end table

@anchor{XREFpatchcategoryObjectIdentification}
@subsubheading Object Identification
@prindex patch ObjectIdentification

@table @asis

@anchor{XREFpatchtag}
@prindex patch tag
@item @code{tag}: string, def. @qcode{""}
A user-defined string to label the graphics object.


@anchor{XREFpatchtype}
@prindex patch type
@item @code{type} (read-only): string
Class name of the graphics object.  @code{type} is always @qcode{"patch"}.


@anchor{XREFpatchuserdata}
@prindex patch userdata
@item @code{userdata}: Any Octave data, def. @code{[](0x0)}
User-defined data to associate with the graphics object.

@end table

@anchor{XREFpatchcategoryOutlineAppearance}
@subsubheading Outline Appearance
@prindex patch OutlineAppearance

@table @asis

@anchor{XREFpatchedgealpha}
@prindex patch edgealpha
@item @code{edgealpha}: scalar | matrix, def. @code{1}
Transparency is not yet implemented for patch objects.  @code{edgealpha} is unused.


@anchor{XREFpatchedgecolor}
@prindex patch edgecolor
@item @code{edgecolor}: colorspec | @qcode{"none"} | @qcode{"flat"} | @qcode{"interp"}, def. @code{[0   0   0]}
Color of the edges of the patch object, specified as either a valid color specification or one of @qcode{"none"}, @qcode{"flat"}, or @qcode{"interp"}.  @qcode{"flat"} and @qcode{"interp"} will set either a single color for each edge or a color interpolated between edge's vertices using the color value data stored in @ref{XREFpatchcdata, , @qcode{"cdata"}}.  @xref{Colors, , colorspec}.


@anchor{XREFpatchedgelighting}
@prindex patch edgelighting
@item @code{edgelighting}: @qcode{"flat"} | @qcode{"gouraud"} | @{@qcode{"none"}@} | @qcode{"phong"}
When set to a value other than @qcode{"none"}, the edges of the object are drawn with light and shadow effects.  Supported values are @qcode{"none"} (no lighting effects), @qcode{"flat"} (faceted look), and @qcode{"gouraud"} (linear interpolation of the lighting effects between the vertices).  @qcode{"phong"} is deprecated and has the same effect as @qcode{"gouraud"}.


@anchor{XREFpatchlinestyle}
@prindex patch linestyle
@item @code{linestyle}: @{@qcode{"-"}@} | @qcode{"--"} | @qcode{"-."} | @qcode{":"} | @qcode{"none"}
@xref{Line Styles}.


@anchor{XREFpatchlinewidth}
@prindex patch linewidth
@item @code{linewidth}: scalar, def. @code{0.5000}
@xref{XREFlinelinewidth, , @w{line linewidth property}}.

@end table

@anchor{XREFpatchcategoryParent/Children}
@subsubheading Parent/Children
@prindex patch Parent/Children

@table @asis

@anchor{XREFpatchchildren}
@prindex patch children
@item @code{children} (read-only): vector of graphics handles, def. @code{[](0x1)}
Child objects for Patch objects is not yet implemented for patch objects.  @code{children} is unused.


@anchor{XREFpatchhandlevisibility}
@prindex patch handlevisibility
@item @code{handlevisibility}: @qcode{"callback"} | @qcode{"off"} | @{@qcode{"on"}@}
If @code{handlevisibility} is @qcode{"off"}, the patch's handle is not visible in its parent's @qcode{"children"} property.


@anchor{XREFpatchparent}
@prindex patch parent
@item @code{parent}: graphics handle
Handle of the parent graphics object.

@end table