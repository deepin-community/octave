@c DO NOT EDIT!  Generated automatically by genpropdoc.m.

@c Copyright (C) 2014-2024 The Octave Project Developers
@c
@c See the file COPYRIGHT.md in the top-level directory of this
@c distribution or <https://octave.org/copyright/>.
@c
@c This file is part of Octave.
@c
@c Octave is free software: you can redistribute it and/or modify it
@c under the terms of the GNU General Public License as published by
@c the Free Software Foundation, either version 3 of the License, or
@c (at your option) any later version.
@c
@c Octave is distributed in the hope that it will be useful, but
@c WITHOUT ANY WARRANTY; without even the implied warranty of
@c MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
@c GNU General Public License for more details.
@c
@c You should have received a copy of the GNU General Public License
@c along with Octave; see the file COPYING.  If not, see
@c <https://www.gnu.org/licenses/>.

Properties of @code{surface} objects (@pxref{XREFsurface,,surface}):

@subsubheading Categories:

@ref{XREFsurfacecategoryCallbackExecution, , @w{Callback Execution}}@: | @ref{XREFsurfacecategoryColorandTransparency, , @w{Color and Transparency}}@: | @ref{XREFsurfacecategoryCoordinateData, , @w{Coordinate Data}}@: | @ref{XREFsurfacecategoryCreation/Deletion, , @w{Creation/Deletion}}@: | @ref{XREFsurfacecategoryDisplay, , @w{Display}}@: | @ref{XREFsurfacecategoryFacesAppearance, , @w{Faces Appearance}}@: | @ref{XREFsurfacecategoryLegendOptions, , @w{Legend Options}}@: | @ref{XREFsurfacecategoryLighting, , @w{Lighting}}@: | @ref{XREFsurfacecategoryMarkerAppearance, , @w{Marker Appearance}}@: | @ref{XREFsurfacecategoryMouseInteraction, , @w{Mouse Interaction}}@: | @ref{XREFsurfacecategoryObjectIdentification, , @w{Object Identification}}@: | @ref{XREFsurfacecategoryOutlineAppearance, , @w{Outline Appearance}}@: | @ref{XREFsurfacecategoryParent/Children, , @w{Parent/Children}}@: 

@anchor{XREFsurfacecategoryCallbackExecution}
@subsubheading Callback Execution
@prindex surface CallbackExecution

@table @asis

@anchor{XREFsurfacebusyaction}
@prindex surface busyaction
@item @code{busyaction}: @qcode{"cancel"} | @{@qcode{"queue"}@}
Define how Octave handles the execution of this object's callback properties when it is unable to interrupt another object's executing callback.  This is only relevant when the currently executing callback object has its @code{interruptible} property set to @qcode{"off"}.  The @code{busyaction} property of the interrupting callback object indicates whether the interrupting callback is queued (@qcode{"queue"} (default)) or discarded (@qcode{"cancel"}).
@xref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFsurfaceinterruptible}
@prindex surface interruptible
@item @code{interruptible}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether this object's callback functions may be interrupted by other callbacks.  By default @code{interruptible} is @qcode{"on"} and callbacks that make use of @code{drawnow}, @code{figure}, @code{waitfor}, @code{getframe} or @code{pause} functions are eventually interrupted.
@xref{Callbacks, , @w{Callbacks section}}.

@end table

@anchor{XREFsurfacecategoryColorandTransparency}
@subsubheading Color and Transparency
@prindex surface ColorandTransparency

@table @asis

@anchor{XREFsurfacealphadata}
@prindex surface alphadata
@item @code{alphadata}: scalar | matrix, def. @code{1}
Transparency is not yet implemented for surface objects.  @code{alphadata} is unused.


@anchor{XREFsurfacealphadatamapping}
@prindex surface alphadatamapping
@item @code{alphadatamapping}: @qcode{"direct"} | @qcode{"none"} | @{@qcode{"scaled"}@}
Transparency is not yet implemented for surface objects.  @code{alphadatamapping} is unused.


@anchor{XREFsurfacecdata}
@prindex surface cdata
@item @code{cdata}: array, def. 3-by-3 double
Color data values for surface vertices. Data is stored either as a 2-D matrix the same size as @ref{XREFsurfacezdata, , @qcode{"zdata"}} where each element's value determines that vertex's color according to the current colormap, or as a 3-D array where the third dimension contains separate red, blue, and green components for each vertex.


@anchor{XREFsurfacecdatamapping}
@prindex surface cdatamapping
@item @code{cdatamapping}: @qcode{"direct"} | @{@qcode{"scaled"}@}
Sets the method for mapping data from the @ref{XREFsurfacecdata, , @w{@qcode{"cdata"} property}} to the current colormap.  @qcode{"Direct"} mapping selects the color using the @qcode{"cdata"} value as an index to the current colormap.  @qcode{"Scale"} mapping scales the @qcode{"cdata"} values to the range specified in the @ref{XREFaxesclim, , @w{@qcode{"clim"} axes property}}.


@anchor{XREFsurfacecdatasource}
@prindex surface cdatasource
@item @code{cdatasource}: string, def. @qcode{""}
The name of a workspace variable that contains data that will be used for the @ref{XREFsurfacecdata, , @w{@qcode{"cdata"} property}}.  Data is transferred into @qcode{"cdata"} using the @ref{XREFrefreshdata, , @w{refreshdata function}}.

@end table

@anchor{XREFsurfacecategoryCoordinateData}
@subsubheading Coordinate Data
@prindex surface CoordinateData

@table @asis

@anchor{XREFsurfacexdata}
@prindex surface xdata
@item @code{xdata}: matrix, def. @code{[1   2   3]}
Data for the x-coordinate.


@anchor{XREFsurfacexdatasource}
@prindex surface xdatasource
@item @code{xdatasource}: string, def. @qcode{""}
The name of a workspace variable that contains data that will be used for the @ref{XREFsurfacexdata, , @w{@qcode{"xdata"} property}}.  Data is transferred into @qcode{"xdata"} using the @ref{XREFrefreshdata, , @w{refreshdata function}}.


@anchor{XREFsurfaceydata}
@prindex surface ydata
@item @code{ydata}: matrix, def. @code{[1;    2;    3]}
Data for the y-coordinate.


@anchor{XREFsurfaceydatasource}
@prindex surface ydatasource
@item @code{ydatasource}: string, def. @qcode{""}
The name of a workspace variable that contains data that will be used for the @ref{XREFsurfaceydata, , @w{@qcode{"ydata"} property}}.  Data is transferred into @qcode{"ydata"} using the @ref{XREFrefreshdata, , @w{refreshdata function}}.


@anchor{XREFsurfacezdata}
@prindex surface zdata
@item @code{zdata}: matrix, def. 3-by-3 double
Data for the z-coordinate.


@anchor{XREFsurfacezdatasource}
@prindex surface zdatasource
@item @code{zdatasource}: string, def. @qcode{""}
The name of a workspace variable that contains data that will be used for the @ref{XREFsurfacezdata, , @w{@qcode{"zdata"} property}}.  Data is transferred into @qcode{"zdata"} using the @ref{XREFrefreshdata, , @w{refreshdata function}}.

@end table

@anchor{XREFsurfacecategoryCreation/Deletion}
@subsubheading Creation/Deletion
@prindex surface Creation/Deletion

@table @asis

@anchor{XREFsurfacebeingdeleted}
@prindex surface beingdeleted
@item @code{beingdeleted}: @{@qcode{"off"}@} | @qcode{"on"}
Property indicating that a function has initiated deletion of the object.  @code{beingdeleted} is set to true until the object no longer exists.


@anchor{XREFsurfacecreatefcn}
@prindex surface createfcn
@item @code{createfcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately after surface has been created.  Function is set by using default property on root object, e.g., @code{set (groot, "defaultsurfacecreatefcn", 'disp ("surface created!")')}.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFsurfacedeletefcn}
@prindex surface deletefcn
@item @code{deletefcn}: string | function handle, def. @code{[](0x0)}
Callback function executed immediately before surface is deleted.

For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.

@end table

@anchor{XREFsurfacecategoryDisplay}
@subsubheading Display
@prindex surface Display

@table @asis

@anchor{XREFsurfaceclipping}
@prindex surface clipping
@item @code{clipping}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{clipping} is @qcode{"on"}, the surface is clipped in its parent axes limits.


@anchor{XREFsurfacevisible}
@prindex surface visible
@item @code{visible}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{visible} is @qcode{"off"}, the surface is not rendered on screen.

@end table

@anchor{XREFsurfacecategoryFacesAppearance}
@subsubheading Faces Appearance
@prindex surface FacesAppearance

@table @asis

@anchor{XREFsurfacefacealpha}
@prindex surface facealpha
@item @code{facealpha}: scalar | @qcode{"flat"} | @qcode{"interp"} | @qcode{"texturemap"}, def. @code{1}
Transparency level of the faces of the surface object.  Only double values are supported at present where a value of 0 means complete transparency and a value of 1 means solid faces without transparency.  Setting the property to @qcode{"flat"}, @qcode{"interp"} or @qcode{"texturemap"} causes the faces to not being rendered.  Additionally, the faces are not sorted from back to front which might lead to unexpected results when rendering layered transparent faces.


@anchor{XREFsurfacefacecolor}
@prindex surface facecolor
@item @code{facecolor}: colorspec | @qcode{"none"} | @{@qcode{"flat"}@} | @qcode{"interp"}
Color of the faces of the surface object, specified as either a valid color specification or one of @qcode{"none"}, @qcode{"flat"}, or @qcode{"interp"}.  @qcode{"flat"} and @qcode{"interp"} will set either a single color for each face or a color interpolated across the face's vertices using the color value data stored in @ref{XREFsurfacecdata, , @qcode{"cdata"}}.  @xref{Colors, , colorspec}.


@anchor{XREFsurfacefacelighting}
@prindex surface facelighting
@item @code{facelighting}: @{@qcode{"flat"}@} | @qcode{"gouraud"} | @qcode{"none"} | @qcode{"phong"}
When set to a value other than @qcode{"none"}, the faces of the object are drawn with light and shadow effects.  Supported values are @qcode{"none"} (no lighting effects), @qcode{"flat"} (faceted look), and @qcode{"gouraud"} (linear interpolation of the lighting effects between the vertices).  @qcode{"phong"} is deprecated and has the same effect as @qcode{"gouraud"}.


@anchor{XREFsurfacefacenormals}
@prindex surface facenormals
@item @code{facenormals}: def. @code{[](0x0)}
Face normals are used for lighting the edges or faces if the @code{edgelighting} or @code{facelighting} properties are set to @qcode{"flat"}.  Setting @code{facenormals} also forces the @code{facenormalsmode} property to be set to @qcode{"manual"}.


@anchor{XREFsurfacefacenormalsmode}
@prindex surface facenormalsmode
@item @code{facenormalsmode}: @{@qcode{"auto"}@} | @qcode{"manual"}
If this property is set to @qcode{"auto"}, @code{facenormals} are automatically calculated if the @code{edgelighting} or @code{facelighting} property are set to @qcode{"flat"} and at least one @code{light} object is present and visible in the same axes.

@end table

@anchor{XREFsurfacecategoryLegendOptions}
@subsubheading Legend Options
@prindex surface LegendOptions

@table @asis

@anchor{XREFsurfacedisplayname}
@prindex surface displayname
@item @code{displayname}: def. @qcode{""}
Text for the legend entry corresponding to this surface.

@end table

@anchor{XREFsurfacecategoryLighting}
@subsubheading Lighting
@prindex surface Lighting

@table @asis

@anchor{XREFsurfaceambientstrength}
@prindex surface ambientstrength
@item @code{ambientstrength}: scalar, def. @code{0.3000}
Strength of the ambient light.  Value between 0.0 and 1.0.


@anchor{XREFsurfacebackfacelighting}
@prindex surface backfacelighting
@item @code{backfacelighting}: @qcode{"lit"} | @{@qcode{"reverselit"}@} | @qcode{"unlit"}
@qcode{"lit"}: The normals are used as is for lighting.  @qcode{"reverselit"}: The normals are always oriented towards the point of view.  @qcode{"unlit"}: Faces with normals pointing away from the point of view are unlit.


@anchor{XREFsurfacediffusestrength}
@prindex surface diffusestrength
@item @code{diffusestrength}: scalar, def. @code{0.6000}
Strength of the diffuse reflection.  Value between 0.0 (no diffuse reflection) and 1.0 (full diffuse reflection).


@anchor{XREFsurfacespecularcolorreflectance}
@prindex surface specularcolorreflectance
@item @code{specularcolorreflectance}: scalar, def. @code{1}
Reflectance for specular color.  Value between 0.0 (color of underlying face) and 1.0 (color of light source).


@anchor{XREFsurfacespecularexponent}
@prindex surface specularexponent
@item @code{specularexponent}: scalar, def. @code{10}
Exponent for the specular reflection.  The lower the value, the more the reflection is spread out.


@anchor{XREFsurfacespecularstrength}
@prindex surface specularstrength
@item @code{specularstrength}: scalar, def. @code{0.9000}
Strength of the specular reflection.  Value between 0.0 (no specular reflection) and 1.0 (full specular reflection).


@anchor{XREFsurfacevertexnormals}
@prindex surface vertexnormals
@item @code{vertexnormals}: def. @code{[](0x0)}
Vertex normals are used for lighting the edges or faces if the @code{edgelighting} or @code{facelighting} properties are set to @qcode{"gouraud"}.  Setting @code{vertexnormals} also forces the @code{vertexnormalsmode} property to be set to @qcode{"manual"}.


@anchor{XREFsurfacevertexnormalsmode}
@prindex surface vertexnormalsmode
@item @code{vertexnormalsmode}: @{@qcode{"auto"}@} | @qcode{"manual"}
If this property is set to @qcode{"auto"}, @code{vertexnormals} are automatically calculated if the @code{edgelighting} or @code{facelighting} property are set to @qcode{"gouraud"} and at least one @code{light} object is present and visible in the same axes.

@end table

@anchor{XREFsurfacecategoryMarkerAppearance}
@subsubheading Marker Appearance
@prindex surface MarkerAppearance

@table @asis

@anchor{XREFsurfacemarker}
@prindex surface marker
@item @code{marker}: @qcode{"*"} | @qcode{"+"} | @qcode{"."} | @qcode{"<"} | @qcode{">"} | @qcode{"^"} | @qcode{"_"} | @qcode{"d"} | @qcode{"diamond"} | @qcode{"h"} | @qcode{"hexagram"} | @{@qcode{"none"}@} | @qcode{"o"} | @qcode{"p"} | @qcode{"pentagram"} | @qcode{"s"} | @qcode{"square"} | @qcode{"v"} | @qcode{"x"} | @qcode{"|"}
@xref{Marker Styles}.


@anchor{XREFsurfacemarkeredgecolor}
@prindex surface markeredgecolor
@item @code{markeredgecolor}: @{@qcode{"auto"}@} | @qcode{"flat"} | @qcode{"none"}
@xref{XREFlinemarkeredgecolor, , @w{line markeredgecolor property}}.


@anchor{XREFsurfacemarkerfacecolor}
@prindex surface markerfacecolor
@item @code{markerfacecolor}: @qcode{"auto"} | @qcode{"flat"} | @{@qcode{"none"}@}
@xref{XREFlinemarkerfacecolor, , @w{line markerfacecolor property}}.


@anchor{XREFsurfacemarkersize}
@prindex surface markersize
@item @code{markersize}: scalar, def. @code{6}
@xref{XREFlinemarkersize, , @w{line markersize property}}.

@end table

@anchor{XREFsurfacecategoryMouseInteraction}
@subsubheading Mouse Interaction
@prindex surface MouseInteraction

@table @asis

@anchor{XREFsurfacebuttondownfcn}
@prindex surface buttondownfcn
@item @code{buttondownfcn}: string | function handle, def. @code{[](0x0)}
For information on how to write graphics listener functions see @ref{Callbacks, , @w{Callbacks section}}.


@anchor{XREFsurfacecontextmenu}
@prindex surface contextmenu
@item @code{contextmenu}: graphics handle, def. @code{[](0x0)}
Graphics handle of the uicontextmenu object that is currently associated to this surface object.


@anchor{XREFsurfacehittest}
@prindex surface hittest
@item @code{hittest}: @qcode{"off"} | @{@qcode{"on"}@}
Specify whether surface processes mouse events or passes them to ancestors of the object.  When enabled, the object may respond to mouse clicks by evaluating the @qcode{"buttondownfcn"}, showing the uicontextmenu, and eventually becoming the root @qcode{"currentobject"}.  This property is only relevant when the object can accept mouse clicks which is determined by the @qcode{"pickableparts"} property.  @xref{XREFsurfacepickableparts, , @w{pickableparts property}}.


@anchor{XREFsurfacepickableparts}
@prindex surface pickableparts
@item @code{pickableparts}: @qcode{"all"} | @qcode{"none"} | @{@qcode{"visible"}@}
Specify whether surface will accept mouse clicks.  By default, @code{pickableparts} is @qcode{"visible"} and only visible parts of the surface or its children may react to mouse clicks.  When @code{pickableparts} is @qcode{"all"} both visible and invisible parts (or children) may react to mouse clicks.  When @code{pickableparts} is @qcode{"none"} mouse clicks on the object are ignored and transmitted to any objects underneath this one.  When an object is configured to accept mouse clicks the @qcode{"hittest"} property will determine how they are processed.  @xref{XREFsurfacehittest, , @w{hittest property}}.


@anchor{XREFsurfaceselected}
@prindex surface selected
@item @code{selected}: @{@qcode{"off"}@} | @qcode{"on"}
Property indicates whether this surface is selected.


@anchor{XREFsurfaceselectionhighlight}
@prindex surface selectionhighlight
@item @code{selectionhighlight}: @qcode{"off"} | @{@qcode{"on"}@}
If @code{selectionhighlight} is @qcode{"on"}, then the surface's selection state is visually highlighted.

@end table

@anchor{XREFsurfacecategoryObjectIdentification}
@subsubheading Object Identification
@prindex surface ObjectIdentification

@table @asis

@anchor{XREFsurfacetag}
@prindex surface tag
@item @code{tag}: string, def. @qcode{""}
A user-defined string to label the graphics object.


@anchor{XREFsurfacetype}
@prindex surface type
@item @code{type} (read-only): string
Class name of the graphics object.  @code{type} is always @qcode{"surface"}.


@anchor{XREFsurfaceuserdata}
@prindex surface userdata
@item @code{userdata}: Any Octave data, def. @code{[](0x0)}
User-defined data to associate with the graphics object.

@end table

@anchor{XREFsurfacecategoryOutlineAppearance}
@subsubheading Outline Appearance
@prindex surface OutlineAppearance

@table @asis

@anchor{XREFsurfaceedgealpha}
@prindex surface edgealpha
@item @code{edgealpha}: scalar, def. @code{1}
Transparency is not yet implemented for surface objects.  @code{edgealpha} is unused.


@anchor{XREFsurfaceedgecolor}
@prindex surface edgecolor
@item @code{edgecolor}: colorspec | @qcode{"none"} | @qcode{"flat"} | @qcode{"interp"}, def. @code{[0   0   0]}
Color of the edges of the surface object, specified as either a valid color specification or one of @qcode{"none"}, @qcode{"flat"}, or @qcode{"interp"}.  @qcode{"flat"} and @qcode{"interp"} will set either a single color for each edge or a color interpolated between two adjacent vertices using the color value data stored in @ref{XREFsurfacecdata, , @qcode{"cdata"}}.  @xref{Colors, , colorspec}.


@anchor{XREFsurfaceedgelighting}
@prindex surface edgelighting
@item @code{edgelighting}: @qcode{"flat"} | @qcode{"gouraud"} | @{@qcode{"none"}@} | @qcode{"phong"}
When set to a value other than @qcode{"none"}, the edges of the object are drawn with light and shadow effects.  Supported values are @qcode{"none"} (no lighting effects), @qcode{"flat"} (faceted look), and @qcode{"gouraud"} (linear interpolation of the lighting effects between the vertices).  @qcode{"phong"} is deprecated and has the same effect as @qcode{"gouraud"}.


@anchor{XREFsurfacelinestyle}
@prindex surface linestyle
@item @code{linestyle}: @{@qcode{"-"}@} | @qcode{"--"} | @qcode{"-."} | @qcode{":"} | @qcode{"none"}
@xref{Line Styles}.


@anchor{XREFsurfacelinewidth}
@prindex surface linewidth
@item @code{linewidth}: scalar, def. @code{0.5000}
@xref{XREFlinelinewidth, , @w{line linewidth property}}.


@anchor{XREFsurfacemeshstyle}
@prindex surface meshstyle
@item @code{meshstyle}: @{@qcode{"both"}@} | @qcode{"column"} | @qcode{"row"}
Specifies whether to display the edges associated with the         surface data's rows, columns, or both.

@end table

@anchor{XREFsurfacecategoryParent/Children}
@subsubheading Parent/Children
@prindex surface Parent/Children

@table @asis

@anchor{XREFsurfacechildren}
@prindex surface children
@item @code{children} (read-only): vector of graphics handles, def. @code{[](0x1)}
Child objects for Surfaces is not yet implemented for surface objects.  @code{children} is unused.


@anchor{XREFsurfacehandlevisibility}
@prindex surface handlevisibility
@item @code{handlevisibility}: @qcode{"callback"} | @qcode{"off"} | @{@qcode{"on"}@}
If @code{handlevisibility} is @qcode{"off"}, the surface's handle is not visible in its parent's @qcode{"children"} property.


@anchor{XREFsurfaceparent}
@prindex surface parent
@item @code{parent}: graphics handle
Handle of the parent graphics object.

@end table